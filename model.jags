
model {
  # fixed constant 
  # N1 number of subjects
  # N2 number of observations
  # K number of latent category
  # P number of parameters in gamma
  # Q number of parameters in beta
  # logits for Latent  
  
  # Prior membership
  for (p in 1:P) {
    for (k in 1:(K-1)) {
      gamma[k,p] ~ dnorm(0, 0.0001)
    }
  }
  
  # Prior for latent class longitudinal 
  for (k in 1:K) {
    for (q in 1:Q) {
      beta[k, q] ~ dnorm(0, 0.0001)
    }
  }
  sigma_b ~ dunif(0, 10000)
  sigma_M ~ dunif(0, 10000)
  
  # Prior for Survival Outcome
  alpha2 ~ dunif(0.01,100)
  
  for (k in 1:K) {
    for (p in 1:P) {
      phi[k, p] ~ dnorm(0, 0.0001)
    }
  }
  
  # Random effect
  for (i in 1:N1){
    b0[i] ~ dnorm(0, 1)
  }
  
  # Prior for N
  for (i in 1:K) {
    theta[i] ~ dnorm(0, 0.0001)
  }
  alpha ~ dunif(0, 50000)
  
  for (i in 1:N1) {
    for (k in 2:K) {
      logits[i,k] <- inprod(X1[i,], gamma[k-1,])
    }
    logits[i,1] <- 0
  }
  
  # Softmax transformation
  for (i in 1:N1) {
    for (k in 1:K) {
      soft[i, k] <- exp(logits[i,k])
    }
    for (k in 1:K) {
      Prob[i, k] <- soft[i,k]/sum(soft[i,])
    }
  }
  
  # Sampling procedure
  for (i in 1:N1) {
    # Sampling latent cluster
    L[i] ~ dcat(Prob[i, ])
    
    # Sampling survival outcome
    mu[i] <- inprod(X2[i,], phi[L[i],])
    censured[i] ~ dinterval(t[i], cent[i])
    lambda[i] <- log(2)*exp(-mu[i]*alpha2) 
    t[i] ~ dweib(alpha2, lambda[i])
    
    # Sampling observation number
    O[i] ~ dnegbin(alpha / (alpha + exp(theta[L[i]])), alpha)
    
    # Sampling longitudinal outcome
    for (j in s[i]:e[i]) {
      EM[j] <- beta[L[i], 1] + Time[j]*beta[L[i], 2] + b0[i] * sigma_b
      M[j] ~ dnorm(EM[j], sigma_M^-2)
    }
  }
}

